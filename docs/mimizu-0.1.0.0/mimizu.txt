-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package mimizu
@version 0.1.0.0


module Mimizu.Chat

-- | The representation of one message.
data Chat
Chat :: Origin -> UTCTime -> String -> String -> Chat

-- | The origin of message.
[origin] :: Chat -> Origin

-- | The time (Internally in UTC, Externally in JST).
[time] :: Chat -> UTCTime

-- | The display name of sender the message sent by.
[sender] :: Chat -> String

-- | The actual message.
[message] :: Chat -> String

-- | The representation of origin where a message come from.
data Origin

-- | NicoNico live stream. See
--   <a>http://com.nicovideo.jp/community/co3265652</a>.
NicoNico :: Origin

-- | TUGame original site. See <a>http://tk2-217-18218.vs.sakura.ne.jp</a>.
TUGame :: Origin

-- | YouTube live stream. See
--   <a>https://www.youtube.com/channel/UCzXL5v5_-L-s4cDhK3I35Dg</a>.
YouTube :: Origin

-- | Twitcasting live stream. See
--   <a>https://twitcasting.tv/c:t_umezawa</a>.
TwitCasting :: Origin

-- | Convert origin to chat websocket acceptable string.
toOriginString :: Origin -> String

-- | Convert origin string to its Enum value.
fromOriginString :: String -> Origin

-- | Convert hh:mm:ss in JST to <a>UTCTime</a>.
fromTimeString :: String -> IO UTCTime
instance GHC.Show.Show Mimizu.Chat.Chat
instance GHC.Show.Show Mimizu.Chat.Origin


module Mimizu.Util

-- | Convert from raw websocket data to Uint16
conv8To16 :: [Word8] -> Word16

-- | Convert from raw websocket data to Uint32
conv8To32 :: [Word8] -> Word32

-- | Convert from raw websocket data to Float
conv8To32f :: [Word8] -> Float

-- | Convert from raw websocket data to list of Uint16. Note: the length of
--   list must be multiple of 2.
conv8To16s :: [Word8] -> [Word16]

-- | Convert from Uint16 to sendable data
conv16To8 :: Word16 -> [Word8]

-- | Convert from Uint32 to sendable data
conv32To8 :: Word32 -> [Word8]

-- | Convert from Uint32 to Float
convToFloat :: Word32 -> Float

-- | The representation of color palette.
data Color

-- | The clolor of #3333ff
NeonBlue :: Color

-- | The clolor of #33bbff
SummerSky :: Color

-- | The clolor of #33ff33
LimeGreen :: Color

-- | The clolor of #33ffbb
Turquoise1 :: Color

-- | The clolor of #33eeee
Turquoise2 :: Color

-- | The clolor of #bb33ff
ElectricPurple :: Color

-- | The clolor of #bbbbee
LavenderGray :: Color

-- | The clolor of #bbff33
GreenYellow :: Color

-- | The clolor of #bbeebb
FringyFlower :: Color

-- | The clolor of #ff3333
RedOrange :: Color

-- | The clolor of #ff33bb
RazzleDazzleRose1 :: Color

-- | The clolor of #ee33ee
RazzleDazzleRose2 :: Color

-- | The clolor of #eeaa33
LightningYellow :: Color

-- | The clolor of #eebbbb
BeautyBush :: Color

-- | The clolor of #eeee33
GoldenFizz :: Color

-- | The clolor of #eeeeee
Whisper :: Color

-- | Convert Color to CSS acceptable string
colorToString :: Color -> String

-- | Convert css color hex-triplet to Color
fromStringToColor :: String -> Color

-- | Index type
type Index = Word32

-- | Convert Haskell Int to Word8
intToWord8 :: Int -> Word8

-- | Convert to Index type
integralToIndex :: Integral a => a -> Index

-- | Convert Text to list of Triplets
makeTriplets :: Text -> [(Index, String, [Color])]

-- | Convert framework color enum from string
makeColors :: String -> [Color]
instance GHC.Show.Show Mimizu.Util.Color
instance GHC.Classes.Eq Mimizu.Util.Color
instance GHC.Enum.Enum Mimizu.Util.Color


module Mimizu.Player

-- | The type of the length
type Length = Word32

-- | The representation of player
data Player
Player :: [Color] -> String -> Word32 -> Word16 -> [Word8] -> Player

-- | Skin information, a sequence of color
[skin] :: Player -> [Color]

-- | Name to be displayed
[name] :: Player -> String

-- | Counter to be shorten
[excreta] :: Player -> Word32

-- | Recent action
[act] :: Player -> Word16

-- | Joints and other info
[playerInfo] :: Player -> [Word8]

-- | A constructor-like function, compatibility for JS original source
createPlayer :: [Word8] -> Player

-- | The length and an air value of the player specified
va :: Player -> Word32

-- | The current speed and `maximum speed` for the player specified
sbm :: Player -> Word16

-- | The rough x-location, this function is only available when the
--   distance between you and the player specified is enough
usx :: Player -> Word16

-- | The rough y-location, this function is only available when the
--   distance between you and the player specified is enough
usy :: Player -> Word16

-- | the counter when the player specified is overlapping/overlapped by
--   other player. when this counter is enough, `going straight` bug will
--   occur.
air :: Player -> Word32

-- | The angle being aimed by the player specified
an :: Player -> Word16

-- | The flag whether dash button is been pressed by the player specified,
--   true if pressed
btn :: Player -> Bool

-- | Number of joints of the player specified
jn :: Player -> Int32

-- | The <tt>gear</tt> the player currently in
sh :: Player -> Float

-- | Current speed of the player specified
spd :: Player -> Word16

-- | The actual length the specified player has
vol :: Player -> Word32

-- | The thickness of the player.
sr :: Player -> Float

-- | Minimum turn radius
tr :: Player -> Float

-- | The x location of head of the player specified. if it is too far,
--   return rough value by Left otherwise, return precise value by Right
x0 :: Player -> Either Word16 Float

-- | The y location of head of the player specified. if it is too far,
--   return rough value by Left otherwise, return precise value by Right
y0 :: Player -> Either Word16 Float

-- | Current Actual Head the player specified is going
angle :: Player -> Float

-- | The x location of idx-th joints of the player specified
jointX :: Index -> Player -> Float

-- | The y location of index-th joints of the player specified
jointY :: Index -> Player -> Float

-- | Size convert function from the length
sizeR :: Length -> Float

-- | Compatibility function for <tt>joinxX</tt> and <a>jointY</a>
x :: Index -> Player -> Float

-- | Compatibility function for <tt>joinxX</tt> and <a>jointY</a>
y :: Index -> Player -> Float

-- | The helper function for <a>MutablePlayerList</a>, it will modify the
--   player info.
modifyPlayerInfo :: [Word8] -> Maybe Player -> Maybe Player

-- | The helper function for <a>MutablePlayerList</a>, it will modify the
--   action.
modifyAction :: Word16 -> Maybe Player -> Maybe Player

-- | The helper function for <a>MutablePlayerList</a>, it will modify the
--   excreta
modifyExcreta :: Word32 -> Maybe Player -> Maybe Player

-- | The helper function for <a>MutablePlayerList</a>, it will modify the
--   name
modifyName :: String -> Maybe Player -> Maybe Player

-- | The helper function for <a>MutablePlayerList</a>, it will modify the
--   skin
modifySkin :: [Color] -> Maybe Player -> Maybe Player

-- | Returns X location in world coordinate of specified Player
playerWorldX :: Player -> Word16

-- | Returns X location in world coordinate of specified Player
playerWorldY :: Player -> Word16

-- | Returns X location in world coordinate of specified Player. This
--   function is more precise than <a>worldX</a>, <a>worldY</a>
playerWorldXf :: Player -> Float

-- | Returns X location in world coordinate of specified Player. This
--   function is more precise than <a>worldX</a>, <a>worldY</a>
playerWorldYf :: Player -> Float

-- | Compatibility function for <a>playerWorldX</a> and
--   <tt>plaeyrWorldY</tt>
worldX :: Player -> Word16

-- | Compatibility function for <a>playerWorldX</a> and
--   <tt>plaeyrWorldY</tt>
worldY :: Player -> Word16

-- | Compatibility function for <a>playerWorldXf</a> and
--   <tt>plaeyrWorldYf</tt>
worldXf :: Player -> Float

-- | Compatibility function for <a>playerWorldXf</a> and
--   <tt>plaeyrWorldYf</tt>
worldYf :: Player -> Float

-- | Returns the distance between players, the distance is measured in
--   World coordinate.
headDistance :: Player -> Player -> Word64

-- | Returns the distance between players, the distance is measured in
--   World coordinate. This function is more precise than
--   <a>headDistance</a>
headDistancef :: Player -> Player -> Float

-- | Returns LT if first player's volume is less than the others' GT when
--   greater than, EQ otherwise.
compareByRanking :: Player -> Player -> Ordering

-- | Sorting playrs given, fits to the ranking.
sortByRanking :: [Player] -> [Player]
instance GHC.Show.Show Mimizu.Player.Player
instance GHC.Classes.Eq Mimizu.Player.Player


module Mimizu.Food

-- | The food info contained by one block.
newtype FoodBlock
FoodBlock :: [Word8] -> FoodBlock
[foodInfo] :: FoodBlock -> [Word8]

-- | Tuple of x and y coordinates for specific food in the food block.
type Food = (Word8, Word8)

-- | Tuple of x and y coordinates for specific food in the world
--   coordinate.
type WorldFood = (Word16, Word16)

-- | Color to be displayed.
color :: Index -> FoodBlock -> Color

-- | Size you can aquire when you eat, also size to be displayed.
size :: Index -> FoodBlock -> Word8

-- | X location of the food specified by index and food block.
foodX :: Index -> FoodBlock -> Word8

-- | Y location of the food specified by index and food block.
foodY :: Index -> FoodBlock -> Word8

-- | Compatibility funcction for <a>foodX</a> and <a>foodY</a>
x :: Index -> FoodBlock -> Word8

-- | Compatibility funcction for <a>foodX</a> and <a>foodY</a>
y :: Index -> FoodBlock -> Word8

-- | The number of foods contained by a food block.
foodCount :: FoodBlock -> Index

-- | Convert a food to world coordinate specified in first index-th block,
--   second index-th food in food block.
foodWorldX :: Index -> Index -> FoodBlock -> Word16

-- | Convert a food to world coordinate specified in first index-th block,
--   second index-th food in food block.
foodWorldY :: Index -> Index -> FoodBlock -> Word16

-- | Compatibility funcction for <a>foodWorldX</a> and <a>foodWorldY</a>.
worldX :: Index -> Index -> FoodBlock -> Word16

-- | Compatibility funcction for <a>foodWorldX</a> and <a>foodWorldY</a>.
worldY :: Index -> Index -> FoodBlock -> Word16

-- | Convert food block to list of <a>Food</a>s.
meshPositions :: FoodBlock -> [Food]

-- | Convert food block to list of <a>WorldFood</a>s.
worldPositions :: Index -> FoodBlock -> [WorldFood]
instance GHC.Show.Show Mimizu.Food.FoodBlock
instance GHC.Classes.Eq Mimizu.Food.FoodBlock


module Mimizu

-- | Returns the food in the block which the player is in, in mesh
--   coordinate.
nearestFood :: Player -> [FoodBlock] -> Food

-- | Returns the minimum distance to a food from the player, in world
--   coordinate.
nearestWorldFood :: Player -> [FoodBlock] -> WorldFood

-- | Calculate relational distance to the player in world coordinate.
worldFoodDistance :: Player -> WorldFood -> Float

-- | Calculate relational distance to the player in mesh coordinate.

-- | <i>Warning: This function does not return the correct value when the
--   block tha food is contained by is different from the player is in.</i>
foodDistance :: Player -> Food -> Float

-- | Compareing the relational distance to the player specified using
--   <a>worldFoodDistance</a> nearer comes first, further comes second.
compareByWorldFoodDistance :: Player -> WorldFood -> WorldFood -> Ordering

-- | Compareing the relational distance to the player specified using
--   <a>foodDistance</a> nearer comes first, further comes second.
compareByFoodDistance :: Player -> Food -> Food -> Ordering

-- | Sort foods by relational distance to the player, using
--   <a>compareByWorldFoodDistance</a>.
sortByWorldFoodDistance :: Player -> [WorldFood] -> [WorldFood]

-- | Sort foods by relational distance to the player, using
--   <a>foodDistance</a>.
sortByFoodDistance :: Player -> [Food] -> [Food]

-- | Similar to <a>sortByFoodDistanceFromFoodBlock</a>, but this function
--   also takes a block index, returns in world coordinate.
sortByWorldFoodDistanceFromFoodBlock :: Player -> Index -> FoodBlock -> [WorldFood]

-- | The same as <a>sortByFoodDistance</a>, but this function takes
--   <a>FoodBlock</a> insted of a list of <a>Food</a>
sortByFoodDistanceFromFoodBlock :: Player -> FoodBlock -> [Food]


module Framework

-- | The destination IP address the socket connects to, in the form of
--   Word8 quadruplet.
hostAddress :: (Word8, Word8, Word8, Word8)

-- | The port number the socket accepts.
gamePort :: PortNumber

-- | The port number the socket accepts.
chatPort :: PortNumber

-- | The callback function, this is called when message received from
--   <a>gamePort</a>.
type GameReceiveCallback = Index  The index of player you are currently playing. -> [(Index, Maybe Player)]  Current list of players, which may not be updated depending on the distance from you. -> [(Index, FoodBlock)]  Current list of food blocks, which may not be updated for the block where the block you are not in. -> IO (DashFlag, GameAngle)  The action you intend to be taken.

-- | Handler.
type ErrorHandler = Index  The index of player you are currently playing. -> [(Index, Maybe Player)]  Current list of players, which may not be updated depending on the distance from you. -> [(Index, FoodBlock)]  Current list of food blocks, which may not be updated for the block where the block you are not in. -> String  The message of error thrown -> IO ()

-- | The callback function, this is called when message received from
--   <a>chatPort</a>
type ChatCallback = [Chat]  Chats recieved, including the latest -> Ranking  The ranking -> IO Text  The message you want to send, if it is empty sending will not be fired.

-- | Must be in range 0 ~ 4095.
type GameAngle = Word16

-- | True if dash is on, False otherwise.
type DashFlag = Bool

-- | A list/map of players, Nothing if the player for that Index is not
--   being played/dead.
type MutablePlayerList = [(Index, IORef (Maybe Player))]

-- | A list/map of food blocks.
type MutableFoodList = [(Index, IORef FoodBlock)]

-- | Your ID for playing, the index is the key of MutablePlayerList.
type PlayerID = IORef Index

-- | High score of the day (when you started to play)
type Ranking = [(String, Word32)]

-- | Convert to websocket acceptable form.
convertToSendable :: (DashFlag, GameAngle) -> ByteString

-- | Convert mutable list/map to immutable.
pullIORefs :: [(Index, IORef a)] -> IO [(Index, a)]

-- | Remove IORef out of the argument.
eliminateIORef :: (Index, IORef a) -> IO (Index, a)

-- | Entry point.
mainLoop :: String -> ErrorHandler -> GameReceiveCallback -> ChatCallback -> ChatCallback -> Bool -> IO ()
